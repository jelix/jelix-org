#!/bin/bash

source $(dirname $0)/../scripts.config.sh
FORCE=""
REQUIRED_BRANCH=""
usage()
{
    echo "nightlybuild [options] [branch name]"
    echo ""
    echo "options:"
    echo "  -f|--force  :  force the generation of archives files, even if there are no changes"
    echo ""
}

for i in $*
do
case $i in
    -f|--force)
    FORCE="1"
    ;;
    -h|--help)
    usage
    ;;
    -*)
      echo "ERROR: Unknown option: $i"
      echo ""
      usage
      exit 1
    ;;
    *)
    if [ "$REQUIRED_BRANCH" == "" ]
    then
        REQUIRED_BRANCH=$i
    else
        echo "ERROR: Too many parameters: $i"
        echo ""
        usage
        exit 1
    fi
    ;;
esac
done

buildbranch()
{
    echo "building $BRANCH branch..."
    echo "==========================================="
    rm -rf $BUILD_DIR/dist/*

    cd $BUILD_GIT_DIR
    git checkout $BRANCH
    OLDREV=`cat .git/refs/heads/$BRANCH`
    git pull origin $BRANCH
    NEWREV=`cat .git/refs/heads/$BRANCH`

    if [ "$FORCE" != "" -o "$OLDREV" != "$NEWREV" ]; then
    
    export DISTPATH=$BUILD_DIR/dist/
    export DOWNLOADPATH=$DIR_JELIX_SITES/download/www/jelix/nightly/$BRANCHVERSION/
    
    if [ ! -d $DOWNLOADPATH ]; then
        mkdir $DOWNLOADPATH
    fi

    make nightlies
    
    mv -f "$DISTPATH"testapp-*.zip    $DOWNLOADPATH
    mv -f "$DISTPATH"testapp-*.tar.gz $DOWNLOADPATH
    
    mv -f "$DISTPATH"jelix-*.zip    $DOWNLOADPATH
    mv -f "$DISTPATH"jelix-*.tar.gz $DOWNLOADPATH

    if [ "$HASMODULES" == "Y" ]; then
        mv -f "$DISTPATH"module-*.zip    $DOWNLOADPATH
        mv -f "$DISTPATH"module-*.tar.gz $DOWNLOADPATH
    fi

    PACKAGE_NAME_DEV=`cat "$DISTPATH"PACKAGE_NAME_DEV`
    PACKAGE_NAME_OPT=`cat "$DISTPATH"PACKAGE_NAME_OPT`
    if [ "$BRANCH" != "master" ]; then
        PACKAGE_NAME_GOLD=`cat "$DISTPATH"PACKAGE_NAME_GOLD`
    fi
    PACKAGE_TESTAPP_NAME=`cat "$DISTPATH"PACKAGE_TESTAPP_NAME`

    cd $DIR_JELIX_SITES/download/www/jelix/nightly/
    if  [ -f latest-nightly-$FILENAME-dev.tar.gz ]
    then
        rm latest-nightly-$FILENAME-dev.tar.gz
    fi
    if  [ -f latest-nightly-$FILENAME-opt.tar.gz ]
    then
        rm latest-nightly-$FILENAME-opt.tar.gz
    fi
    if  [ -f latest-nightly-$TESTAPPFILENAME.tar.gz ]
    then
        rm latest-nightly-$TESTAPPFILENAME.tar.gz
    fi

    ln -s $BRANCHVERSION/"$PACKAGE_NAME_DEV".tar.gz latest-nightly-$FILENAME-dev.tar.gz
    ln -s $BRANCHVERSION/"$PACKAGE_NAME_OPT".tar.gz latest-nightly-$FILENAME-opt.tar.gz
    ln -s $BRANCHVERSION/"$PACKAGE_TESTAPP_NAME".tar.gz latest-nightly-$TESTAPPFILENAME.tar.gz
    
    if  [ -f latest-nightly-$FILENAME-dev.zip ]
    then
        rm latest-nightly-$FILENAME-dev.zip
    fi
    if  [ -f latest-nightly-$FILENAME-opt.zip ]
    then
        rm latest-nightly-$FILENAME-opt.zip
    fi
    if  [ -f latest-nightly-$TESTAPPFILENAME.zip ]
    then
        rm latest-nightly-$TESTAPPFILENAME.zip
    fi
    ln -s $BRANCHVERSION/"$PACKAGE_NAME_DEV".zip latest-nightly-$FILENAME-dev.zip
    ln -s $BRANCHVERSION/"$PACKAGE_NAME_OPT".zip latest-nightly-$FILENAME-opt.zip
    ln -s $BRANCHVERSION/"$PACKAGE_TESTAPP_NAME".zip latest-nightly-$TESTAPPFILENAME.zip

    if [ "$BRANCH" != "master" ]; then
        if  [ -f latest-nightly-$FILENAME-gold.tar.gz ]
        then
            rm latest-nightly-$FILENAME-gold.tar.gz
        fi
        ln -s $BRANCHVERSION/"$PACKAGE_NAME_GOLD".tar.gz latest-nightly-$FILENAME-gold.tar.gz
        if  [ -f latest-nightly-$FILENAME-gold.zip ]
        then
            rm latest-nightly-$FILENAME-gold.zip
        fi
        ln -s $BRANCHVERSION/"$PACKAGE_NAME_GOLD".zip latest-nightly-$FILENAME-gold.zip
    fi

    if [ "$FONTSFILENAME" != "" ]
    then
        PACKAGE_FONTS_NAME=`cat "$DISTPATH"PACKAGE_FONTS_NAME`
        if  [ -f latest-nightly-$FONTSFILENAME.zip ]
        then
            rm latest-nightly-$FONTSFILENAME.zip
        fi
        ln -s $BRANCHVERSION/"$PACKAGE_FONTS_NAME".zip latest-nightly-$FONTSFILENAME.zip
    fi

    fi # new rev
    
    echo ""
    echo ""
}

BRANCHEVERSIONLIST="1.4.x 1.3.x 1.2.x"
for BRANCHVERSION in $BRANCHEVERSIONLIST; do
    BRANCH="jelix-$BRANCHVERSION"
    FILENAME="jelix-$BRANCHVERSION"
    TESTAPPFILENAME="testapp-$BRANCHVERSION"
    FONTSFILENAME="jelix-$BRANCHVERSION-pdf-fonts"
    HASMODULES=""

    if [ "$REQUIRED_BRANCH" == "" -o "$REQUIRED_BRANCH" == "$BRANCH" ]
    then
        buildbranch
    fi
done

BRANCHEVERSIONLIST="1.5.x 1.6.x"
for BRANCHVERSION in $BRANCHEVERSIONLIST; do
    if [ "$BRANCHVERSION" == "$CURRENT_MASTER_VERSION" ]
    then
        BRANCH="master"
    else
        BRANCH="jelix-$BRANCHVERSION"
    fi
    FILENAME="jelix-$BRANCHVERSION"
    TESTAPPFILENAME="testapp-$BRANCHVERSION"
    FONTSFILENAME=""
    HASMODULES="Y"

    if [ "$REQUIRED_BRANCH" == "" -o "$REQUIRED_BRANCH" == "$BRANCH" ]
    then
        buildbranch
    fi
done


